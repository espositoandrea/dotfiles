#+TITLE: Doom Emacs Config
#+AUTHOR: Andrea Esposito
#+PROPERTY: header-args :tangle yes :comments both

* Table of Contents :TOC:
- [[#introduction][Introduction]]
- [[#basic-variables-and-configs][Basic Variables and Configs]]
  - [[#themes][Themes]]
- [[#org-mode][Org Mode]]
  - [[#allowing-citations][Allowing Citations]]
  - [[#latex-export][LaTeX Export]]
- [[#additional-stuff][Additional Stuff]]
- [[#mail-mu4e][Mail (mu4e)]]
  - [[#using-org-mode][Using Org-Mode]]
  - [[#accounts-setup][Accounts Setup]]
- [[#telegram][Telegram]]
- [[#olivetti-mode][Olivetti mode]]

* Introduction
#+BEGIN_INFO
The content of this documentation comes directly from Doom Emacs' default configuration's comments.
#+END_INFO

#+BEGIN_SRC elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+END_SRC

This is, instead, the original documentation of Doom Emacs =packages.el= file.

#+BEGIN_SRC elisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;; (package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/radian-software/straight.el#the-recipe-format
;; (package! another-package
;;   :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;; (package! this-package
;;   :recipe (:host github :repo "username/repo"
;;            :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;; (package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;; (package! builtin-package :recipe (:nonrecursive t))
;; (package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see radian-software/straight.el#279)
;; (package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;; (package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;; (unpin! pinned-package)
;; ...or multiple packages
;; (unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;; (unpin! t)
;(package! smart-tabs-mode)
;(package! company-posframe)
#+END_SRC


* Basic Variables and Configs
Place your private configuration here! Remember, you do not need to run 'doom
sync' after modifying this file!

The following line can be used on macOS to remove the title bar and make the
application window "rounded" (as other macOS apps). This looks especially good
if used with tiling window managers (e.g., yabai).
#+BEGIN_SRC elisp
(add-to-list 'default-frame-alist '(undecorated-round . t))
#+END_SRC


Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets. It is optional.
#+BEGIN_SRC elisp
(setq user-full-name "Andrea Esposito"
      user-mail-address "esposito_andrea99@hotmail.com")
(setq gnutls-min-prime-bits 512)
#+end_src

** Themes
 Doom exposes five (optional) variables for controlling fonts in Doom:

 - `doom-font' -- the primary font to use
 - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
 - `doom-big-font' -- used for `doom-big-font-mode'; use this for
   presentations or streaming.
 - `doom-symbol-font' -- for symbols
 - `doom-serif-font' -- for the `fixed-pitch-serif' face

 See 'C-h v doom-font' for documentation and more examples of what they
 accept. For example:

#+BEGIN_SRC elisp
;; (setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
#+END_SRC

 If you or Emacs can't find your font, use 'M-x describe-font' to look them
 up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
 refresh your font settings. If Emacs still can't find your font, it likely
 wasn't installed correctly. Font issues are rarely Doom issues!

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. The default is =doom-one=.

#+begin_src elisp
(setq doom-theme 'doom-dracula)
#+end_src

This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For absolute line numbers, set this to `t'. For relative line numbers, set this to `relative'.
#+begin_src elisp
(setq display-line-numbers-type 'relative)
#+end_src

Whenever you reconfigure a package, make sure to wrap your config in an
`after!' block, otherwise Doom's defaults may override your settings. E.g.
#+BEGIN_SRC elisp :tangle no
  (after! PACKAGE
    (setq x y))
#+END_SRC
The exceptions to this rule:
  - Setting file/directory variables (like `org-directory')
  - Setting variables which explicitly tell you to set them before their
    package is loaded (see 'C-h v VARIABLE' to look up their documentation).
  - Setting doom variables (which start with 'doom-' or '+').
Here are some additional functions/macros that will help you configure Doom.
- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys
To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.
Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
etc).
You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.

* Org Mode
#+begin_src elisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/Documents/Org")


;; Set the output theme of HTML code to CSS, thus making it dependent on the
;; actual stylesheet used.
(setq org-html-htmlize-output-type 'css)
#+END_SRC

** Allowing Citations
This package allows citing from BibTeX. We must install it first...
#+BEGIN_SRC elisp :tangle packages.el
(package! org-ref)
#+END_SRC
... and then require it.
#+BEGIN_SRC elisp
(require 'org-ref)
#+END_SRC

** LaTeX Export
#+BEGIN_SRC elisp
(with-eval-after-load 'ox-latex
  (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))
  (add-to-list 'org-latex-classes
               '("notes"
                 "\\documentclass{mynotes}
\\usepackage[utf8]{inputenc}
[NO-DEFAULT-PACKAGES]"
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (add-to-list 'org-latex-classes
               '("lncs"
                 "\\documentclass{llncs}
\\usepackage[utf8]{inputenc}
\\usepackage{graphicx}
\\usepackage{hyperref}
[NO-DEFAULT-PACKAGES]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (add-to-list 'org-latex-classes
               '("cvpr"
                 "\\documentclass[10pt,twocolumn,letterpaper]{article}
\\usepackage{cvpr}
\\usepackage{times}
\\usepackage{epsfig}
\\usepackage{graphicx}
\\usepackage{amsmath}
\\usepackage{amssymb}
[NO-DEFAULT-PACKAGES]
"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted)
#+end_src

* Additional Stuff
#+BEGIN_SRC elisp
(display-battery-mode t)
(setq display-time-string-forms '(year "." month "." day " " 24-hours ":" minutes))
(display-time)
#+END_src

* Mail (mu4e)
#+BEGIN_SRC elisp
(setq mu4e-compose-format-flowed t)
;; (remove-hook! 'mu4e-compose-pre-hook #'org-msg-mode)
;; (add-hook! 'mu4e-compose-mode-hook #'message-mode)
;; (setq mm-sign-option 'guided)
;; (setq mu4e-sent-messages-behavior (lambda ()
                                    ;; (if (string= (message-sendmail-envelope-from) "a.esposito39@studenti.uniba.it")
                                        ;; 'delete 'sent)))
;; (add-hook! 'mu4e-compose-mode-hook #'turn-on-auto-fill)

(setq mu4e-headers-date-format "%+4Y-%m-%d")
(setq mu4e-view-html-plaintext-ratio-heuristic most-positive-fixnum)
(setq mu4e-context-policy 'always-ask)
;; (add-hook 'mu4e-compose-mode-hook 'flyspell-mode)
(setq mu4e-maildir-shortcuts '(("/uniba/Inbox" . ?u)
                               ))
                               ;; ("/studentiuniba/Inbox" . ?s)
                               ;;("/hotmail/Inbox" . ?h)))
(setq mu4e-compose-format-flowed t)
#+END_SRC

** Using Org-Mode
#+BEGIN_SRC elisp :tangle packages.el
(package! org-mime)
;; (package! org-msg :disable t)
;; (package! org-msg)
#+END_SRC

#+BEGIN_SRC elisp
(use-package org-mime
  :ensure t)
#+END_SRC

** Accounts Setup
*** Personal Account (Hotmail/Outlook)
#+BEGIN_SRC elisp :tangle no
(set-email-account! "Hotmail"
  '((mu4e-sent-folder       . "/hotmail/Sent")
    (mu4e-drafts-folder     . "/hotmail/Drafts")
    (mu4e-trash-folder      . "/hotmail/Deleted")
    (mu4e-refile-folder     . "/hotmail/Archive")
    (mu4e-get-mail-command  . "mbsync -a")
    (mu4e-update-interval   . 60)
    (smtpmail-smtp-user     . "esposito_andrea99@hotmail.com")
    (user-mail-address      . "esposito_andrea99@hotmail.com")    ;; only needed for mu < 1.4
    (smtpmail-stream-type   . starttls)
    (smtpmail-smtp-server . "smtp.office365.com")
    (smtpmail-smtp-service . 587)
    (mu4e-compose-signature . (concat "Andrea Esposito\n"
                                      "Master’s student in Computer Science\n"
                                      "\n"
                                      "University of Bari “Aldo Moro”\n"
                                      "Department of Computer Science\n"
                                      "Degree Course in Computer Science\n"
                                      "\n"
                                      "Student ID: 735116\n"
                                      "ORCID: 0000-0002-9536-3087\n"
                                      "Personal Home Page: https://espositoandrea.github.io/")))
  t)
#+END_SRC
*** Work Account (University of Bari)
#+BEGIN_SRC elisp
(set-email-account! "UniBa"
  '((mu4e-sent-folder       . "/uniba/Sent")
    (mu4e-drafts-folder     . "/uniba/Drafts")
    (mu4e-trash-folder      . "/uniba/Trash")
    (mu4e-refile-folder     . "/uniba/Archive")
    ;; (mu4e-get-mail-command  . "mbsync -a")
    (mu4e-update-interval   . 60)
    (smtpmail-smtp-user     . "andrea.esposito")
    (user-mail-address      . "andrea.esposito@uniba.it")    ;; only needed for mu < 1.4
    (smtpmail-stream-type   . starttls)
    (smtpmail-smtp-server . "smtp.uniba.it")
    (smtpmail-smtp-service . 587)
    (mu4e-compose-signature . (concat "Andrea Esposito\n"
                                      "PhD Student & Research Fellow\n"
                                      "\n"
                                      "University of Bari Aldo Moro\n"
                                      "Department of Computer Science\n"
                                      "I.V.U. Laboratory\n"
                                      "Via E. Orabona 4, 70125 Bari, Italy (4th floor)\n"
                                      "\n"
                                      "eMail: andrea.esposito@uniba.it\n"
                                      "Web: https://espositoandrea.github.io\n"
                                      "ORCID: 0000-0002-9536-3087\n"
                                      "Tel.: +39 080 5442461\n" )))
  t)
#+END_SRC

#+RESULTS:
#+begin_example
#s(mu4e-context "UniBa" #[nil ((mu4e-message "Switched to %s" label)) ((label . "UniBa"))] #[nil ((setq +mu4e-personal-addresses nil) (if (fboundp 'mu4e-clear-caches) (mu4e-clear-caches))) (t)] #[(msg) ((if msg (progn (string-prefix-p (format "/%s" label) (mu4e-message-field msg :maildir) t)))) ((label . "UniBa"))] ((mu4e-sent-folder . "/uniba/Sent") (mu4e-drafts-folder . "/uniba/Drafts") (mu4e-trash-folder . "/uniba/Trash") (mu4e-refile-folder . "/uniba/Archive") (mu4e-update-interval . 60) (smtpmail-smtp-user . "andrea.esposito") (user-mail-address . "andrea.esposito@uniba.it") (smtpmail-stream-type . starttls) (smtpmail-smtp-server . "smtp.uniba.it") (smtpmail-smtp-service . 587) (mu4e-compose-signature concat "Andrea Esposito
" "PhD Student & Research Fellow
" "
" "University of Bari Aldo Moro
" "Department of Computer Science
" "I.V.U. Laboratory
" "Via E. Orabona 4, 70125 Bari, Italy (4th floor)
" "
" "eMail: andrea.esposito@uniba.it
" "Web: https://espositoandrea.github.io
" "ORCID: 0000-0002-9536-3087
" "Tel.: +39 080 5442461
")))
#+end_example

*** University Account (Student) [OLD]
#+BEGIN_SRC elisp :tangle no
(set-email-account! "Studenti UniBa"
  '((mu4e-trash-folder      . "/studentiuniba/[Gmail]/Cestino")
    (mu4e-refile-folder     . "/studentiuniba/[Gmail]/Archivio")
    (mu4e-drafts-folder     . "/studentiuniba/[Gmail]/Bozze")
    (mu4e-sent-folder       . "/studentiuniba/[Gmail]/Posta inviata")
    (mu4e-get-mail-command  . "mbsync -a")
    (mu4e-update-interval   . 60)
    (smtpmail-smtp-user     . "a.esposito39@studenti.uniba.it")
    (user-mail-address      . "a.esposito39@studenti.uniba.it")    ;; only needed for mu < 1.4
    (smtpmail-stream-type   . starttls)
    (smtpmail-smtp-server . "smtp.gmail.com")
    (smtpmail-smtp-service . 587)
    (mu4e-compose-signature . (concat "Andrea Esposito\n"
                                      "Master’s student in Computer Science\n"
                                      "\n"
                                      "University of Bari “Aldo Moro”\n"
                                      "Department of Computer Science\n"
                                      "Degree Course in Computer Science\n"
                                      "\n"
                                      "Student ID: 735116\n"
                                      "ORCID: 0000-0002-9536-3087\n"
                                      "Personal Home Page: https://espositoandrea.github.io/")))
  t)

#+END_SRC

* Telegram
The Telegram config is currently /disabled/ since I don't need it for now...
To use it, one should first install this package:
#+BEGIN_SRC elisp :tangle no packages.el
(package! telega)
#+END_SRC

This is my configuration.
#+BEGIN_SRC elisp :tangle no
(defun my-telega-chat-mode ()
  (set (make-local-variable 'company-backends)
       (append (list 'telega-company-emoji
                   'telega-company-username
                   'telega-company-botcmd
                   'telega-company-hashtag)
             (when (telega-chat-bot-p telega-chatbuf--chat)
               '(telega-company-botcmd))))
  (company-mode 1))

(add-hook 'telega-chat-mode-hook 'my-telega-chat-mode)

(setq telega-use-images t
      telega-emoji-font-family "Ubuntu")
(telega-notifications-mode 1)
(add-to-list 'evil-emacs-state-modes 'telega-chat-mode)
(add-hook 'telega-chat-mode-hook
  (lambda ()
   (local-set-key (kbd "C-c q") 'telega)))

(map! :leader :desc "Open Telegram client" "o t" #'telega)
(require 'company-posframe)
(company-posframe-mode 1)

(map! :leader :desc "Open Telegram client" "o t" #'telega)
#+end_src

* Olivetti mode
#+BEGIN_SRC elisp :tangle packages.el
(package! olivetti)
#+END_SRC

#+BEGIN_SRC elisp
(map! :leader :desc "Toggle Olivetti mode" "t o"  #'olivetti-mode)
#+END_SRC
